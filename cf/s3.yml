Resources:
  S3BucketForWebsiteContent:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      BucketName: ${self:custom.siteName}
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - POST
            AllowedOrigins:
              - "*"
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: S3BucketForWebsiteContent
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action:
              - s3:GetObject
            Resource:
              Fn::Join:
                ['', ['arn:aws:s3:::', !Ref S3BucketForWebsiteContent, '/*']]
          - Sid: AllowSSLRequestsOnly
            Effect: Deny
            Principal: "*"
            Action:
              - s3:*
            Resource:
              Fn::Join:
                ['', ['arn:aws:s3:::', !Ref S3BucketForWebsiteContent, '/*']]
            Condition:
              Bool:
                "aws:SecureTransport": "false"
Outputs:
  BucketName:
    Description: 'S3 Bucket Name'
    Value: !Ref S3BucketForWebsiteContent